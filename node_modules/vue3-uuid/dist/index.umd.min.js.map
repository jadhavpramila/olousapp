{"version":3,"file":"index.umd.min.js","sources":["../node_modules/_uuid@8.3.2@uuid/dist/esm-node/rng.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/regex.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/validate.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/stringify.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/v1.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/v35.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/parse.js","../index.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/v3.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/md5.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/v4.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/v5.js","../node_modules/_uuid@8.3.2@uuid/dist/esm-node/sha1.js"],"sourcesContent":["import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;","import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}","import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;","import { v1, v3, v4, v5 } from \"uuid\";\n\n/**\n * @typedef {Object} UUID\n * @property {typeof v1} v1\n * @property {typeof v3} v3\n * @property {typeof v4} v4\n * @property {typeof v5} v5\n */\n\n/**\n * An object with uuid's v1, v3, v4 and v5 functions.\n * @type {UUID}\n */\nexport const uuid = { v1, v3, v4, v5 };\n\n/**\n * Installs UUID on Vue instance. It creates a property on Vue instance to\n * expose an object with uuid's v1, v3, v4 and v5 functions.\n * @example ```js\n * import Vue from 'vue';\n * import VueUUID from 'vue-uuid';\n *\n * Vue.use(VueUUID);\n *\n * new Vue({\n *   mounted () {\n *     console.log(this.$uuid.v1());\n *   }\n * });\n * ```\n * @param {import('vue').default} Vue Vue constructor.\n */\nexport default function install(Vue) {\n  console.log('vue3 uuid install')\n}\n","import v35 from './v35.js';\nimport md5 from './md5.js';\nconst v3 = v35('v3', 0x30, md5);\nexport default v3;","import crypto from 'crypto';\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('md5').update(bytes).digest();\n}\n\nexport default md5;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;","import crypto from 'crypto';\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('sha1').update(bytes).digest();\n}\n\nexport default sha1;"],"names":["rnds8Pool","Uint8Array","poolPtr","length","rng","crypto","randomFillSync","slice","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","toLowerCase","TypeError","_nodeId","_clockseq","_lastMSecs","_lastNSecs","name","version","hashfunc","generateUUID","value","namespace","buf","str","unescape","encodeURIComponent","bytes","charCodeAt","stringToBytes","v","parseInt","parse","set","err","DNS","URL","options","b","Array","node","clockseq","undefined","seedBytes","random","msecs","Date","now","nsecs","dt","Error","tl","tmh","n","v35","isArray","Buffer","from","createHash","update","digest","rnds","Vue","console","log"],"mappings":"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"}